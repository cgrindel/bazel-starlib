load("@bazel_binaries//:defs.bzl", "bazel_binaries")
load(
    "@rules_bazel_integration_test//bazel_integration_test:defs.bzl",
    "bazel_integration_tests",
    "integration_test_utils",
)
load("//:bazel_versions.bzl", "CURRENT_BAZEL_VERSION", "SUPPORTED_BAZEL_VERSIONS")
load("//bzlformat:defs.bzl", "bzlformat_pkg")

bzlformat_pkg(name = "bzlformat")

# MARK: - Integration Tests

sh_binary(
    name = "missing_pkgs_test_runner",
    testonly = True,
    srcs = ["missing_pkgs_test.sh"],
    data = [
        "@buildifier_prebuilt//buildozer",
        "@rules_bazel_integration_test//tools:create_scratch_dir",
    ],
    deps = [
        "//shlib/lib:assertions",
        "//shlib/lib:messages",
        "//shlib/lib:paths",
        "@bazel_tools//tools/bash/runfiles",
    ],
)

bazel_integration_tests(
    name = "missing_pkgs_test",
    timeout = "eternal",
    bazel_binaries = bazel_binaries,
    bazel_versions = SUPPORTED_BAZEL_VERSIONS,
    target_compatible_with = select({
        "@cgrindel_bazel_starlib//bzlmod:is_enabled": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    test_runner = ":missing_pkgs_test_runner",
    workspace_files = integration_test_utils.glob_workspace_files("workspace") + [
        "//:workspace_integration_test_files",
    ],
    workspace_path = "workspace",
)

test_suite(
    name = "smoke_integration_tests",
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS,
    tests = [
        integration_test_utils.bazel_integration_test_name(
            ":missing_pkgs_test",
            CURRENT_BAZEL_VERSION,
        ),
    ],
    visibility = ["//:__subpackages__"],
)

test_suite(
    name = "integration_tests",
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS,
    tests = integration_test_utils.bazel_integration_test_names(
        ":missing_pkgs_test",
        SUPPORTED_BAZEL_VERSIONS,
    ),
    visibility = ["//:__subpackages__"],
)
