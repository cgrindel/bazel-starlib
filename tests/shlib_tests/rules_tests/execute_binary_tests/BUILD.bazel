load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@rules_shell//shell:sh_binary.bzl", "sh_binary")
load("@rules_shell//shell:sh_test.bzl", "sh_test")
load("//bzlformat:defs.bzl", "bzlformat_pkg")
load("//shlib/rules:execute_binary.bzl", "execute_binary", "file_placeholder")

bzlformat_pkg(name = "bzlformat")

sh_binary(
    name = "my_bin",
    srcs = ["my_bin.sh"],
)

# MARK: - Test no args

execute_binary(
    name = "my_bin_no_args",
    binary = ":my_bin",
)

sh_test(
    name = "execute_binary_no_args_test",
    srcs = ["execute_binary_no_args_test.sh"],
    data = [":my_bin_no_args"],
    deps = [
        "//shlib/lib:assertions",
        "@rules_shell//shell/runfiles",
    ],
)

# MARK: - Test with args

write_file(
    name = "data_file",
    out = "data.txt",
    content = [
        "This is a data file.",
    ],
)

write_file(
    name = "input_file",
    out = "input.txt",
    content = [
        "This is an input file.",
    ],
)

execute_binary(
    name = "my_bin_with_args",
    arguments = [
        "--first",
        "first value has spaces",
        "not_a_flag",
        "\"quoted value with spaces\"",
        "--check_data_file",
        "--input",
        file_placeholder("input"),
    ],
    binary = ":my_bin",
    data = [
        ":data_file",
    ],
    file_arguments = {
        ":input_file": "input",
    },
)

sh_test(
    name = "execute_binary_with_args_test",
    srcs = ["execute_binary_with_args_test.sh"],
    data = [":my_bin_with_args"],
    deps = [
        "//shlib/lib:assertions",
        "@rules_shell//shell/runfiles",
    ],
)

# MARK: - Test execute_binary passed as arg to another execute_binary

sh_binary(
    name = "process_file",
    srcs = ["process_file.sh"],
    data = [
        ":data_file",
    ],
    deps = [
        "@rules_shell//shell/runfiles",
    ],
)

write_file(
    name = "arg_file",
    out = "arg_file.txt",
    content = [
        "This is an arg file.",
    ],
)

execute_binary(
    name = "process_file_eb",
    arguments = [
        "--file",
        file_placeholder("arg_file"),
    ],
    binary = ":process_file",
    file_arguments = {
        ":arg_file": "arg_file",
    },
)

sh_binary(
    name = "process_file_consumer",
    srcs = ["process_file_consumer.sh"],
    deps = [
        "//shlib/lib:fail",
        "@rules_shell//shell/runfiles",
    ],
)

execute_binary(
    name = "process_file_consumer_eb",
    arguments = [
        "--process_file",
        file_placeholder("process_file"),
    ],
    binary = ":process_file_consumer",
    file_arguments = {
        ":process_file_eb": "process_file",
    },
)

sh_test(
    name = "process_file_consumer_eb_test",
    srcs = ["process_file_consumer_eb_test.sh"],
    data = [
        ":process_file_consumer_eb",
    ],
    deps = [
        "//shlib/lib:assertions",
        "@rules_shell//shell/runfiles",
    ],
)

# MARK: - Test execute_binary with execute_in_workspace

sh_binary(
    name = "find_workspace",
    srcs = ["find_workspace.sh"],
)

execute_binary(
    name = "find_workspace_eb",
    binary = ":find_workspace",
    execute_in_workspace = True,
)

sh_test(
    name = "find_workspace_eb_test",
    srcs = ["find_workspace_eb_test.sh"],
    data = [
        ":find_workspace_eb",
    ],
    deps = [
        "@cgrindel_bazel_starlib//shlib/lib:assertions",
        "@rules_shell//shell/runfiles",
    ],
)
